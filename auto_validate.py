import csvimport osimport openpyxlfrom parameters import collimator, gantry_angle, SSD, wedge, prescription_dose'''method: read_truth_tablethis method are used to read the truth table value from truth table file in path.'''def read_truth_table(case_number):    #  step1: get file path adn open file    line = os.path.split(os.path.realpath(__file__))[0] + "/Path/truth table.xlsx"    wb = openpyxl.load_workbook(line)    sheet = wb['Sheet1']    truth_datas = {}    colName =[]    for colNum in range(0, sheet.max_column):        colName.append(sheet[1][colNum].value)    #step2: extract truth case value    for rowNum in range(2, sheet.max_row):   # skip the first row        truthcase = {}        for colNum in range(1, sheet.max_column):            truthcase[colName[colNum-1]] = str(sheet[rowNum][colNum-1].value)        truth_datas[rowNum - 1] = truthcase    return truth_datas[case_number]'''Method: validate_to_csv_filethis function toCSVFile is used to convert param dataList to one csv file which contain value and result(pass/fail); paramType means: which param you want to   '''def validate_to_csv_file(dataList, destination, paramType="GantryAngle"):    csvFile = open(destination, 'w', newline='')    # step1: read truth value from truth table    filePath = os.path.split(os.path.realpath(__file__))[0] + "/truth_table_path"    file = open(filePath)    truth_values = set()    for line in file:        if line.startswith(paramType):            values = line[(len(paramType)+1):].split(",")            # print(values)            for value in values:                truth_values.add(int(value))    # step2: validate    # if the value is in truth value, the result is true, otherwise,false    try:        writer = csv.writer(csvFile)        writer.writerow((paramType + " #", 'value', 'result'))        for i in range(len(dataList)):            flag = dataList[i] in truth_values            writer.writerow((i, dataList[i], flag))    finally:        csvFile.close()'''Method: auto_validate_DICOM this function auto_validate is used to auto validate file from DICOM file and show result to csv!'''def auto_validate_DICOM(case_number, dicom_file):    # step1: extract parameters from dicom_file;    # it is extendable;    # todo: extract more parameters and extend here    extracted_gantry = gantry_angle.extract_gantry_angle(dicom_file)    extracted_SSD = SSD.extract_SSD(dicom_file)    extracted_wedge = wedge.extract_wedge(dicom_file)    extracted_collimator = collimator.extract_collimator(dicom_file)    extracted_prescription_dose = prescription_dose.extract_prescription_dose(dicom_file)    truth_case = read_truth_table(case_number)    dst = dicom_file[0:int(dicom_file.find("."))] + ".csv"    csvFile = open(dst, 'w', newline='')    writer = csv.writer(csvFile)    writer.writerow(("------------------------------","Detailed parameter values------------------------------", "------------------------------"))    # step2: validate with truth table;    # todo: validate more parameters and extend here    res_gantry = gantry_angle.validate_gantry(truth_case, extracted_gantry, writer, case_number)    res_SSD = SSD.validate_SSD(truth_case, extracted_SSD, writer, case_number)    res_wedge = wedge.validate_wedge(truth_case, extracted_wedge, writer, case_number)    res_collimator = collimator.validate_collimator(truth_case, extracted_collimator, writer, case_number)    res_prescription_dose = prescription_dose.validate_prescription_dose(truth_case,extracted_prescription_dose, writer,case_number);    # result! to cvs!    try:        writer.writerow(("------------------------------", "RESULT------------------------------------------------------------------",                         "------------------------------"))        writer.writerow(("result for gantry: ", str(res_gantry)))        writer.writerow(("result for SSD: ", str(res_SSD)))        writer.writerow(("result for wedge: ", str(res_wedge)))        writer.writerow(("result for collimator: ", str(res_collimator)))        writer.writerow(("result for pres_dose: ", str(res_prescription_dose)))        writer.writerow(("final result: ", str(res_gantry and res_SSD and res_wedge and res_collimator and prescription_dose)))    finally:        csvFile.close()'''method: walk allthe method are used to travel all dicomFile in given directory. case_number means which case you want to validate with. '''def walkAll(case_number):    file_path = os.path.split(os.path.realpath(__file__))[0] + "/Path/DICOM_File_Path"    # print(file_path)    file = open(file_path)    for path in file:        fileList = os.listdir(path)  # get all files in path        for filename in fileList:            pathTmp = os.path.join(path, filename)  # get the fill path            if os.path.isfile(pathTmp) and filename.endswith("dcm"):  # check is dicom file                auto_validate_DICOM(case_number, pathTmp)    print("--------------------FINISH---------------------------------------------")def __main__():    # param means the case number you want to validate in truth table;    walkAll(3)if __name__=="__main__":    __main__()## '''# test method:# '''### def TestGantryAngle(file_path):#     ds = pydicom.dcmread(file_path, force=True)#     list1 = [150.0, 60.0]