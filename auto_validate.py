import pydicomimport csvimport osimport openpyxlimport gantry_angleimport SSDimport wedgeimport collimator'''method1: read_truth_tablethis method are used to read the truth table from given file path in truth_table_path,'''def read_truth_table(case_number):    file_path = os.path.split(os.path.realpath(__file__))[0] + "/truth_table_path"    file = open(file_path)    for line in file:        wb = openpyxl.load_workbook(line)        sheet = wb['Sheet1']        truth_datas = {}        colName =[]        for colNum in range(0, sheet.max_column):            colName.append(sheet[1][colNum].value)        # print(colName)        for rowNum in range(2, sheet.max_row):   # skip the first row            truthcase = {}            for colNum in range(1, sheet.max_column):                truthcase[colName[colNum-1]] = str(sheet[rowNum][colNum-1].value)            truth_datas[rowNum - 1] = truthcase        return truth_datas[case_number]'''Method2:  this function toCSVFile is used to convert param dataList to one csv file which contain value and result(pass/fail); paramType means: which param you want to   '''# def validate_to_csv_file(dataList, destination, paramType="GantryAngle"):#     csvFile = open(destination, 'w', newline='')##     # step1: read truth value from truth table#     filePath = os.path.split(os.path.realpath(__file__))[0] + "/truth_table_path"#     file = open(filePath)#     truth_values = set()#     for line in file:#         if line.startswith(paramType):#             values = line[(len(paramType)+1):].split(",")#             # print(values)#             for value in values:#                 truth_values.add(int(value))##     # step2: validate#     # if the value is in truth value, the result is true, otherwise,false#     try:#         writer = csv.writer(csvFile)#         writer.writerow((paramType + " #", 'value', 'result'))#         for i in range(len(dataList)):#             flag = dataList[i] in truth_values#             writer.writerow((i, dataList[i], flag))#     finally:#         csvFile.close()'''Method3:  this function auto_validate is used to auto validate file from DICOM file and print result!'''def auto_validate(case_number):    # step1: read dicom file from given directory: DICOM_File_Path;    file_path = os.path.split(os.path.realpath(__file__))[0] + "/DICOM_File_Path"    file = open(file_path)    for line in file:        # step2: extract parameters from dicom;        # it is extendable;        extracted_gantry = gantry_angle.extract_gantry_angle(line)        extracted_SSD = SSD.extract_SSD(line)        # todo: extract more parameters in the next weeks!        extracted_wedge = wedge.extract_wedge(line)        extracted_collimator = collimator.extract_collimator(line)        # step3: validate with truth table;        # todo: validate more parameters in the next weeks!        truth_case = read_truth_table(case_number)        res_gantry = gantry_angle.validate_gantry(truth_case, extracted_gantry)        res_SSD = SSD.validate_SSD(truth_case, extracted_SSD)        res_wedge = wedge.validate_wedge(truth_case,extracted_wedge)        res_collimator = collimator.validate_collimator(truth_case, extracted_collimator)        # result! to cvs!        print("--------------------Result------------------------")        print("result for gantry: "+ str(res_gantry))        print("result for SSD: " + str(res_SSD))        print("result for wedge: "+ str(res_wedge))        print("result for collimator: "+ str(res_collimator))        print("final result: "+ str(res_gantry and res_SSD and res_wedge and res_collimator))    file.close()auto_validate(1)## '''# test method:# '''### def TestGantryAngle(file_path):#     ds = pydicom.dcmread(file_path, force=True)#     list1 = [150.0, 60.0]